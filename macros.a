!zone RT_Macros {

!macro INIT_SCREEN {
            ldy #0
-           !for i,0,3 {
              lda $D800+i*$100,y
              and #7
              sta $D800+i*$100,y
              lda $0400+i*$100,y
              and #127
              sta $0400+i*$100,y
            }
            iny
            bne -

            lda #0
            sta $D020
            sta $D021

            lda $D018
            and #%11110001
            ora #%00001000
            sta $D018
}

;
; Kopiert Daten von start bis ende nach ziel
;
!macro COPY start,ende,ziel {
            lda #<start
            sta .sm1+1
            lda #>start
            sta .sm1+2
            lda #<ziel
            sta .sm2+1
            lda #>ziel
            sta .sm2+2

            ldy #$00
-
.sm1        lda $FFFF,y
.sm2        sta $FFFF,y
            inc .sm1+1
            bne +
            inc .sm1+2
+           inc .sm2+1
            bne +
            inc .sm2+2
+           lda .sm1+1
            cmp #<ende
            bne -
            lda .sm1+2
            cmp #>ende
            bne -
}

;
; Kopiert Zeichensatz aus dem ROM ans Ziel ($0800 Byte)
;
!macro COPY_CHAR ziel {
            lda $DC0E
            and #%11111110
            sta $DC0E
            lda $01
            and #%11111011
            sta $01

            +COPY $D000, $D800, ziel

            lda $01
            ora #%00000100
            sta $01
            lda $DC0E
            ora #%00000001
            sta $DC0E
}

;
; Kopiert eine Rechteck auf den Bildschirm (Zeichen und Farbe)
;
!macro COPY_RECTANGLE char,col,ziel,x,y {
            lda #<char
            sta .sm1+1
            lda #>char
            sta .sm1+2
            lda #<col
            sta .sm3+1
            lda #>col
            sta .sm3+2
            lda #<ziel
            sta .sm2+1
            sta .sm4+1
            lda #>ziel
            sta .sm2+2
            clc
            adc #$D4
            sta .sm4+2

            ldx #y
--          ldy #x-1
-
.sm1        lda $FFFF,y
.sm2        sta $FFFF,y
.sm3        lda $FFFF,y
.sm4        sta $FFFF,y
            dey
            bpl -

            clc
            lda .sm1+1
            adc #x
            sta .sm1+1
            bcc +
            inc .sm1+2
            clc

+           lda .sm3+1
            adc #x
            sta .sm3+1
            bcc +
            inc .sm3+2
            clc

+           lda .sm2+1
            adc #40
            sta .sm2+1
            bcc +
            inc .sm2+2
            clc

+           lda .sm4+1
            adc #40
            sta .sm4+1
            bcc +
            inc .sm4+2

+           dex
            bne --
}

;
; Wartet '@c' Taktzyklen.
;
!macro SIMPLE_WAIT @c {
  !if @c<0 { !warn "Cannot wait negative amount (",@c,") of cycles" }
  !do while @c>7 { cmp ($00,X): !set @c = @c-6 }
  !if @c=7 { cmp ($00),Y: nop }
  !if @c=6 { cmp ($00,X) }
  !if @c=5 { cmp ($00),Y }
  !if @c=4 { cmp $00,X }
  !if @c=3 { cmp $00 }
  !if @c=2 { nop }
  !if @c=1 { !warn "Cannot wait 1 cycle" }
}

;
; Wartet '@c' Taktzyklen. Benutzt ggfs. Schleife mit X-Register.
;
; Hinweis: Die Synchronisation funktioniert auch, wenn die
; Branch-Befehle eine Seitengrenze überschreiten.
;
!macro WAIT @c {
  !do while @c>=13 {

    !set @f = 5
    !if <* >= $FB and <* <= $FD { !set @f = 6 }           ; Seitengrenze
    !set @a = (@c-1) DIV @f
    !if @a>256 { !set @a = 256 }                          ; Maximum
    !if @c - @f*@a - 2 + (@f-4) = 1 { !set @a = @a - 1 }  ; Restzyklen != 1
    !set @c = @c - @f*@a - 2 + (@f-4)

    ldx #@a & 255
-   dex
    bne -
  }
  +SIMPLE_WAIT @c
}

;
; Wartet auf Rasterzeile '@line'. Genauer: Bis die unteren 8 Bit
; der Rasterzeile übereinstimmen.
;
; Endet in Zeile @line, Takt 4-10 (11, falls Seitengrenze)
;
; Vorsicht: Im Falle von Badlines und zu vielen Sprites kann es auch
; eine Endlosschleife werden.
;
!macro RLINE @line {
  lda #@line
- cmp $D012
  bne -
}

;
; Setzt @bad auf 1, falls @zeile eine Badline ist, sonst auf 0.
;
!macro IS_BAD ~@bad, @zeile {
  !set @bad = @zeile>=51 & @zeile<=243 & @zeile % 8 = 3
}

;
; Synchronisiert den Rasterstrahl mit dem Prozessor in Zeile @n.
; Der nächste Befehl beginnt dann in Zyklus 6 in Zeile @n.
;
; Vorsicht: Die drei Zeilen vor Zeile @n dürfen keine Sprites
; enthalten. Badlines werden berücksichtigt.
;
; Hinweis: Die Synchronisation funktioniert auch, wenn die
; Branch-Befehle eine Seitengrenze überschreiten.
;
!macro SYNC @n {
    +RLINE (@n-3) AND 255

    +IS_BAD ~@val, @n-3
    +WAIT 53 - 43*@val

    lda $d012
    cmp #(@n-2) AND 255
    beq +
    !set @a = >*
    nop: jmp +           ; WAIT 5, aber ohne Zeroflag zu löschen
    !set @b = >*
+   !if @a != @b { bne + }

+   +IS_BAD ~@val, @n-2
    +WAIT 52 - 43*@val - 3*(@b-@a)

    lda $d012
    cmp #(@n-1) AND 255
    beq +
    !set @a = >*
    jmp +                ; WAIT 3, aber ohne Zeroflag zu löschen
    !set @b = >*
+   !if @a != @b { bne + }

+   +IS_BAD ~@val, @n-1
    +WAIT 53 - 43*@val - 3*(@b-@a)

    lda $d012
    cmp #@n AND 255
    bne +
+
}

;
; Initialisiert den Rasterzeilen-IRQ auf Zeile 'zeile'.
;
!macro INIT_IRQ irq, zeile {
            sei

            lda #zeile AND 255
            sta $d012
            lda $d011
            !if zeile<=255 { and #$7f } else { ora #$80 }
            sta $d011

            lda $d01a
            ora #$01
            sta $d01a

            lda #<irq
            sta $0314
            lda #>irq
            sta $0315

            lda $d019
            sta $d019

            cli
}

;
; Anfang der IRQ-Routine, verzweigt zum normalen IRQ, falls kein
; Rasterzeilen-IRQ.
;
!macro START_IRQ {
     lda $d019
     bmi +

     lda $dc0d
     cli
     jmp $ea31
+    sta $d019
}

!macro END_IRQ {
     lda $d019
     sta $d019
     pla
     tay
     pla
     tax
     pla
     rti
}

}
